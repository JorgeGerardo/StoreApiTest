// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreApiTest.Data;

#nullable disable

namespace StoreApiTest.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250220194612_Rename")]
    partial class Rename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bussiness.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Bussiness.Models.CustomerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerProducts");
                });

            modelBuilder.Entity("Bussiness.Models.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Bussiness.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Playera para hombre talla mediana en color negro",
                            Image = "https://i.imgur.com/QkIa5tT.jpeg",
                            Price = 700f,
                            Title = "Playera negra"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sudadera muy padre en color gris para hombres con frío",
                            Image = "https://i.imgur.com/wbIMMme.jpeg",
                            Price = 632f,
                            Title = "Sudadera"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sudadera muy padre en color gris oscuro para hombres que tengan frío",
                            Image = "https://i.imgur.com/R2PN9Wq.jpeg",
                            Price = 234f,
                            Title = "Sudadera dark gray"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Es la misma sudadera solo que con otra foto y vendida como otro producto",
                            Image = "https://i.imgur.com/R2PN9Wq.jpeg",
                            Price = 234f,
                            Title = "Sudadera gris gray"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Es una sudadera de color negro muuuuy bonita",
                            Image = "https://i.imgur.com/R2PN9Wq.jpeg",
                            Price = 879f,
                            Title = "Sudadera negra"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Es un pantalón que parece pijama",
                            Image = "https://i.imgur.com/R2PN9Wq.jpeg",
                            Price = 879f,
                            Title = "Pantalón de pijama"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Es un pantalón que parece pijama pero esta vez es para mujeres",
                            Image = "https://i.imgur.com/mp3rUty.jpeg",
                            Price = 373f,
                            Title = "Pijama mujer"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Es un pantalón negro de pijama para caballero",
                            Image = "https://i.imgur.com/ZKGofuB.jpeg",
                            Price = 373f,
                            Title = "Pijama negra"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Es un pantalón blanco de pijama para dama",
                            Image = "https://i.imgur.com/mp3rUty.jpeg",
                            Price = 723f,
                            Title = "Pijama blanca"
                        });
                });

            modelBuilder.Entity("Bussiness.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sucursal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Bussiness.Models.StoreInventary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreInventary", (string)null);
                });

            modelBuilder.Entity("Bussiness.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jorguito@example.com",
                            HashPassword = "b88b88cd87cf54d08aabf61b73023cf35551850dc8da5a9d8ae410ef243f74ce",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "lucrecia@example.com",
                            HashPassword = "362b3c03a6b7ad6e47e3029b1eb9f31194123825ff4aec5833feca5e120446f0",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "samueljuan@example.com",
                            HashPassword = "67a0978030e50d8f060cc216bc9ae8ea0e3fa38f0951cc412e5b41744f548add",
                            Role = 0
                        });
                });

            modelBuilder.Entity("Bussiness.Models.CustomerProduct", b =>
                {
                    b.HasOne("Bussiness.Models.Customer", "Customer")
                        .WithMany("CartProducts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bussiness.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bussiness.Models.InventoryTransaction", b =>
                {
                    b.HasOne("Bussiness.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bussiness.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bussiness.Models.StoreInventary", "StoreStock")
                        .WithMany("Transacctions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("StoreStock");
                });

            modelBuilder.Entity("Bussiness.Models.StoreInventary", b =>
                {
                    b.HasOne("Bussiness.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bussiness.Models.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Bussiness.Models.User", b =>
                {
                    b.HasOne("Bussiness.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Bussiness.Models.Customer", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("Bussiness.Models.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Bussiness.Models.StoreInventary", b =>
                {
                    b.Navigation("Transacctions");
                });
#pragma warning restore 612, 618
        }
    }
}
